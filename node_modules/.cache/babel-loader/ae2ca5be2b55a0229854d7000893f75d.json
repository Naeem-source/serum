{"ast":null,"code":"import _toConsumableArray from\"/home/itxnaeem/Work-IDEO/Serumdex/serum/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import _slicedToArray from\"/home/itxnaeem/Work-IDEO/Serumdex/serum/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React from'react';import{useAccountInfo}from'../../../utils/connection';import{parseTokenAccountData,parseTokenMintData}from'../../../utils/tokens';import{Button,Spin,Tabs}from'antd';import FloatingElement from'../../../components/layout/FloatingElement';import{useTokenAccounts}from'../../../utils/markets';import{MintName}from'../../../components/MintName';import{LinkOutlined}from'@ant-design/icons';import{WRAPPED_SOL_MINT}from'@project-serum/serum/lib/token-instructions';var TabPane=Tabs.TabPane;export default function PoolBalancesPanel(_ref){var poolInfo=_ref.poolInfo;return/*#__PURE__*/React.createElement(FloatingElement,null,/*#__PURE__*/React.createElement(Tabs,null,/*#__PURE__*/React.createElement(TabPane,{tab:\"Wallet Balances\",key:\"wallet\"},/*#__PURE__*/React.createElement(WalletBalancesTab,{poolInfo:poolInfo})),/*#__PURE__*/React.createElement(TabPane,{tab:\"Pool Balances\",key:\"pool\"},/*#__PURE__*/React.createElement(PoolBalancesTab,{poolInfo:poolInfo}))));}function WalletBalancesTab(_ref2){var poolInfo=_ref2.poolInfo;var _useTokenAccounts=useTokenAccounts(),_useTokenAccounts2=_slicedToArray(_useTokenAccounts,1),tokenAccounts=_useTokenAccounts2[0];return/*#__PURE__*/React.createElement(\"ul\",null,[poolInfo.state.poolTokenMint].concat(_toConsumableArray(poolInfo.state.assets.map(function(asset){return asset.mint;}))).map(function(mint,index){var tokenAccount=tokenAccounts===null||tokenAccounts===void 0?void 0:tokenAccounts.find(function(account){return account.effectiveMint.equals(mint);});if(!tokenAccount){return null;}return/*#__PURE__*/React.createElement(BalanceItem,{key:index,mint:mint,publicKey:tokenAccount.pubkey,isPoolToken:mint.equals(poolInfo.state.poolTokenMint)});}));}function PoolBalancesTab(_ref3){var poolInfo=_ref3.poolInfo;return/*#__PURE__*/React.createElement(\"ul\",null,poolInfo.state.assets.map(function(asset,index){return/*#__PURE__*/React.createElement(BalanceItem,{key:index,mint:asset.mint,publicKey:asset.vaultAddress});}));}function BalanceItem(_ref4){var mint=_ref4.mint,publicKey=_ref4.publicKey,isPoolToken=_ref4.isPoolToken;var _useAccountInfo=useAccountInfo(mint),_useAccountInfo2=_slicedToArray(_useAccountInfo,1),mintAccountInfo=_useAccountInfo2[0];var _useAccountInfo3=useAccountInfo(publicKey),_useAccountInfo4=_slicedToArray(_useAccountInfo3,1),balanceAccountInfo=_useAccountInfo4[0];var quantityDisplay=/*#__PURE__*/React.createElement(Spin,{size:\"small\"});if(mintAccountInfo&&balanceAccountInfo){var mintInfo=parseTokenMintData(mintAccountInfo.data);if(mint.equals(WRAPPED_SOL_MINT)){quantityDisplay=/*#__PURE__*/React.createElement(React.Fragment,null,balanceAccountInfo.lamports/Math.pow(10,mintInfo.decimals));}else{var accountInfo=parseTokenAccountData(balanceAccountInfo.data);quantityDisplay=/*#__PURE__*/React.createElement(React.Fragment,null,accountInfo.amount/Math.pow(10,mintInfo.decimals));}}return/*#__PURE__*/React.createElement(\"li\",null,quantityDisplay,' ',isPoolToken?/*#__PURE__*/React.createElement(React.Fragment,null,\"Pool Token (\",/*#__PURE__*/React.createElement(MintName,{mint:mint}),\")\"):/*#__PURE__*/React.createElement(MintName,{mint:mint}),' ',/*#__PURE__*/React.createElement(Button,{type:\"link\",icon:/*#__PURE__*/React.createElement(LinkOutlined,null),href:'https://solscan.io/address/'+publicKey.toBase58(),target:\"_blank\",rel:\"noopener noreferrer\"}));}","map":{"version":3,"sources":["/home/itxnaeem/Work-IDEO/Serumdex/serum/src/pages/pools/PoolPage/PoolBalancesPanel.tsx"],"names":["React","useAccountInfo","parseTokenAccountData","parseTokenMintData","Button","Spin","Tabs","FloatingElement","useTokenAccounts","MintName","LinkOutlined","WRAPPED_SOL_MINT","TabPane","PoolBalancesPanel","poolInfo","WalletBalancesTab","tokenAccounts","state","poolTokenMint","assets","map","asset","mint","index","tokenAccount","find","account","effectiveMint","equals","pubkey","PoolBalancesTab","vaultAddress","BalanceItem","publicKey","isPoolToken","mintAccountInfo","balanceAccountInfo","quantityDisplay","mintInfo","data","lamports","decimals","accountInfo","amount","toBase58"],"mappings":"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","sourcesContent":["import { PoolInfo } from '@project-serum/pool';\nimport React from 'react';\nimport { PublicKey } from '@solana/web3.js';\nimport { useAccountInfo } from '../../../utils/connection';\nimport {\n  parseTokenAccountData,\n  parseTokenMintData,\n} from '../../../utils/tokens';\nimport { Button, Spin, Tabs } from 'antd';\nimport FloatingElement from '../../../components/layout/FloatingElement';\nimport { useTokenAccounts } from '../../../utils/markets';\nimport { MintName } from '../../../components/MintName';\nimport { LinkOutlined } from '@ant-design/icons';\nimport { WRAPPED_SOL_MINT } from '@project-serum/serum/lib/token-instructions';\n\nconst { TabPane } = Tabs;\n\nexport default function PoolBalancesPanel({\n  poolInfo,\n}: {\n  poolInfo: PoolInfo;\n}) {\n  return (\n    <FloatingElement>\n      <Tabs>\n        <TabPane tab=\"Wallet Balances\" key=\"wallet\">\n          <WalletBalancesTab poolInfo={poolInfo} />\n        </TabPane>\n        <TabPane tab=\"Pool Balances\" key=\"pool\">\n          <PoolBalancesTab poolInfo={poolInfo} />\n        </TabPane>\n      </Tabs>\n    </FloatingElement>\n  );\n}\n\nfunction WalletBalancesTab({ poolInfo }: { poolInfo: PoolInfo }) {\n  const [tokenAccounts] = useTokenAccounts();\n  return (\n    <ul>\n      {[\n        poolInfo.state.poolTokenMint,\n        ...poolInfo.state.assets.map((asset) => asset.mint),\n      ].map((mint, index) => {\n        const tokenAccount = tokenAccounts?.find((account) =>\n          account.effectiveMint.equals(mint),\n        );\n        if (!tokenAccount) {\n          return null;\n        }\n        return (\n          <BalanceItem\n            key={index}\n            mint={mint}\n            publicKey={tokenAccount.pubkey}\n            isPoolToken={mint.equals(poolInfo.state.poolTokenMint)}\n          />\n        );\n      })}\n    </ul>\n  );\n}\n\nfunction PoolBalancesTab({ poolInfo }: { poolInfo: PoolInfo }) {\n  return (\n    <ul>\n      {poolInfo.state.assets.map((asset, index) => {\n        return (\n          <BalanceItem\n            key={index}\n            mint={asset.mint}\n            publicKey={asset.vaultAddress}\n          />\n        );\n      })}\n    </ul>\n  );\n}\n\ninterface BalanceItemProps {\n  mint: PublicKey;\n  publicKey: PublicKey;\n  isPoolToken?: boolean;\n}\n\nfunction BalanceItem({ mint, publicKey, isPoolToken }: BalanceItemProps) {\n  const [mintAccountInfo] = useAccountInfo(mint);\n  const [balanceAccountInfo] = useAccountInfo(publicKey);\n  let quantityDisplay = <Spin size=\"small\" />;\n  if (mintAccountInfo && balanceAccountInfo) {\n    const mintInfo = parseTokenMintData(mintAccountInfo.data);\n    if (mint.equals(WRAPPED_SOL_MINT)) {\n      quantityDisplay = (\n        <>{balanceAccountInfo.lamports / 10 ** mintInfo.decimals}</>\n      );\n    } else {\n      const accountInfo = parseTokenAccountData(balanceAccountInfo.data);\n      quantityDisplay = <>{accountInfo.amount / 10 ** mintInfo.decimals}</>;\n    }\n  }\n\n  return (\n    <li>\n      {quantityDisplay}{' '}\n      {isPoolToken ? (\n        <>\n          Pool Token (<MintName mint={mint} />)\n        </>\n      ) : (\n        <MintName mint={mint} />\n      )}{' '}\n      <Button\n        type=\"link\"\n        icon={<LinkOutlined />}\n        href={'https://solscan.io/address/' + publicKey.toBase58()}\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n      />\n    </li>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}